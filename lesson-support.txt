class DistributedTemperatureSensing extends AggregateProgram
	// Libraries, expressed as mix-in
	with BlockG with BlockC with BlockS with BlocksWithGC with StandardSensors with Actuation { 
	// "entry point", kind of "end-of-the-world" of effects
	override def main: Any = {
      	val localTemperature = rep(temperature)(x => x)
		val area = 200 // area size in which I want sense temperature
		val leader = S(area, nbrRange) // center of that area
		val potential = distanceTo(leader) // used to send information to leader
		val areaTemperature = average(leader, localTemperature) // average temperature value
		val result = broadcast(leader, areaTemperature) // share the temperature to devices
		ledAll to hsl((result - 20) / 10.0, 0.5, 0.5)
    }
	def temperature: Double = randomGenerator().nextDouble() * 10 + 20
}
val program = new DistributedTemperatureSensing

class MyProgram extends AggregateProgram with StandardSensors with BlockG with Actuation {
  override def main() : Any = {
  		def source : Boolean = sense("source")
		def target : Boolean = sense("target")
		def channel(source: Boolean, target: Boolean, width: Double): Boolean = {
		  distanceTo(source) + distanceTo(target) <= distanceBetween(source, target) + width
		}
		val channelWidth = 1
		val inChannel = channel(source, target, channelWidth)
		val channelColor = mux(inChannel) { ledAll to "red" } { ledAll to rgb(125, 125, 125) }
		val nodeColor = mux(source) { ledAll to "blue" } {
		  mux(target) { ledAll to "green" } { channelColor }
		}
		(nodeColor)
  }
}
val program = new MyProgram
